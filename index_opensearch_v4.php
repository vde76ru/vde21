<?php
/**
 * üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ OpenSearch v4
 * 
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
 * 2. üóëÔ∏è –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)  
 * 3. üìù –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * 4. üì¶ –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 5. üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–ª–∏–∞—Å –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
 * 6. üßπ –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
 * 7. ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * 
 * –û–î–ò–ù –ó–ê–ü–£–°–ö = –ì–û–¢–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê!
 */

require __DIR__ . '/vendor/autoload.php';

use OpenSearch\ClientBuilder;

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const BATCH_SIZE = 1000;
const MEMORY_LIMIT = '60G';
const MAX_EXECUTION_TIME = 3600;
const MAX_OLD_INDICES = 2; // –°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å

class CompleteIndexer {
    private $client;
    private $pdo;
    private $processed = 0;
    private $errors = 0;
    private $skipped = 0;
    private $startTime;
    private $newIndexName;
    private $totalProducts = 0;
    private $oldIndices = [];

    public function __construct() {
        $this->startTime = microtime(true);
        $this->newIndexName = 'products_' . date('Y_m_d_H_i_s');
        echo $this->getHeader();
    }

    /**
     * üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
     */
    public function run(): void {
        try {
            // üîç –≠—Ç–∞–ø 1: –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            $this->checkSystemRequirements();
            $this->initializeConnections();
            $this->analyzeCurrentState();
            
            // üìù –≠—Ç–∞–ø 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            $this->prepareNewIndex();
            
            // üì¶ –≠—Ç–∞–ø 3: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            $this->processAllProducts();
            
            // ‚úÖ –≠—Ç–∞–ø 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            $this->validateNewIndex();
            $this->switchToNewIndex();
            
            // üßπ –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            $this->performCleanup();
            
            // üéâ –≠—Ç–∞–ø 6: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            $this->showFinalReport();
            
        } catch (Throwable $e) {
            $this->handleCriticalFailure($e);
        }
    }

    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
     */
    private function checkSystemRequirements(): void {
        echo "üîç === –°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        $memoryLimit = ini_get('memory_limit');
        echo "üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: $memoryLimit\n";
        
        if ($this->parseMemoryLimit($memoryLimit) < (50 * 1024 * 1024 * 1024)) {
            echo "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å memory_limit –¥–æ 60G\n";
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        $timeLimit = ini_get('max_execution_time');
        echo "‚è±Ô∏è –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {$timeLimit}s\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PHP
        $requiredExtensions = ['json', 'curl', 'pdo_mysql', 'mbstring'];
        foreach ($requiredExtensions as $ext) {
            if (!extension_loaded($ext)) {
                throw new Exception("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PHP: $ext");
            }
        }
        echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PHP –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (!file_exists(__DIR__ . '/products_v5.json')) {
            throw new Exception("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: products_v5.json");
        }
        echo "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω\n\n";
    }

    /**
     * üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private function initializeConnections(): void {
        echo "üîå === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–ô ===\n";
        
        // OpenSearch —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try {
            $this->client = ClientBuilder::create()
                ->setHosts(['localhost:9200'])
                ->setRetries(3)
                ->setConnectionParams([
                    'timeout' => 30, 
                    'connect_timeout' => 10
                ])
                ->build();
                
            $info = $this->client->info();
            echo "‚úÖ OpenSearch –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤–µ—Ä—Å–∏—è: " . $info['version']['number'] . "\n";
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∞—Å—Ç–µ—Ä–∞
            $health = $this->client->cluster()->health(['timeout' => '10s']);
            $status = $health['status'];
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞: $status\n";
            
            if ($status === 'red') {
                throw new Exception("‚ùå –ö–ª–∞—Å—Ç–µ—Ä OpenSearch –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!");
            }
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenSearch: " . $e->getMessage());
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        $this->checkRequiredPlugins();
        
        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try {
            $config = \App\Core\Config::get('database.mysql');
            $dsn = "mysql:host={$config['host']};dbname={$config['database']};charset=utf8mb4";
            
            $this->pdo = new PDO($dsn, $config['user'], $config['password'], [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET SESSION sql_mode='STRICT_ALL_TABLES'"
            ]);
            
            echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\n";
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " . $e->getMessage());
        }
    }

    /**
     * üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
     */
    private function checkRequiredPlugins(): void {
        try {
            $plugins = $this->client->cat()->plugins();
            $installedPlugins = [];
            
            foreach ($plugins as $plugin) {
                $name = $plugin['component'] ?? $plugin['name'] ?? 'unknown';
                $installedPlugins[] = $name;
            }
            
            echo "üîå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã: " . implode(', ', $installedPlugins) . "\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
            $requiredPlugins = ['analysis-phonetic']; // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            $missingPlugins = [];
            
            foreach ($requiredPlugins as $plugin) {
                if (!in_array($plugin, $installedPlugins)) {
                    $missingPlugins[] = $plugin;
                }
            }
            
            if (!empty($missingPlugins)) {
                echo "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞–≥–∏–Ω—ã: " . implode(', ', $missingPlugins) . "\n";
                echo "‚ÑπÔ∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n";
            } else {
                echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–ª–∞–≥–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n";
            }
            
        } catch (Exception $e) {
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–≥–∏–Ω—ã: " . $e->getMessage() . "\n";
        }
    }

    /**
     * üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    private function analyzeCurrentState(): void {
        echo "üìä === –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===\n";
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        try {
            $indices = $this->client->indices()->get(['index' => 'products_*']);
            $this->oldIndices = array_keys($indices);
            
            echo "üóÇÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤ products_*: " . count($this->oldIndices) . "\n";
            foreach ($this->oldIndices as $index) {
                echo "   üìÅ $index\n";
            }
            
        } catch (Exception $e) {
            echo "‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫?)\n";
            $this->oldIndices = [];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–ª–∏–∞—Å
        try {
            $aliases = $this->client->indices()->getAlias(['name' => 'products_current']);
            echo "üîó –¢–µ–∫—É—â–∏–π –∞–ª–∏–∞—Å products_current:\n";
            foreach ($aliases as $indexName => $aliasData) {
                echo "   üéØ $indexName\n";
            }
        } catch (Exception $e) {
            echo "‚ÑπÔ∏è –ê–ª–∏–∞—Å products_current –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
        $this->totalProducts = $this->getTotalProductsCount();
        echo "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {$this->totalProducts}\n";
        
        if ($this->totalProducts === 0) {
            throw new Exception("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!");
        }
        
        echo "\n";
    }

    /**
     * üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function prepareNewIndex(): void {
        echo "üìù === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ò–ù–î–ï–ö–°–ê ===\n";
        echo "üÜï –ò–º—è –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {$this->newIndexName}\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å
        try {
            if ($this->client->indices()->exists(['index' => $this->newIndexName])) {
                echo "‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º...\n";
                $this->client->indices()->delete(['index' => $this->newIndexName]);
                sleep(2); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            }
        } catch (Exception $e) {
            // –ò–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $indexConfig = $this->loadAndValidateConfig();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        try {
            $this->client->indices()->create([
                'index' => $this->newIndexName,
                'body' => $indexConfig
            ]);
            
            echo "‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω\n";
            
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
            $this->waitForIndexReady();
            echo "‚úÖ –ò–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n\n";
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: " . $e->getMessage());
        }
    }

    /**
     * üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function loadAndValidateConfig(): array {
        echo "üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ products_v5.json...\n";
        
        $configContent = file_get_contents(__DIR__ . '/products_v5.json');
        if ($configContent === false) {
            throw new Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª products_v5.json");
        }
        
        $config = json_decode($configContent, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ JSON –≤ products_v5.json: " . json_last_error_msg());
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $this->validateIndexConfiguration($config);
        
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞\n";
        return $config;
    }

    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function validateIndexConfiguration(array $config): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (!isset($config['settings']) || !isset($config['mappings'])) {
            throw new Exception("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ settings –∏–ª–∏ mappings");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        $requiredAnalyzers = [
            'text_analyzer', 
            'code_analyzer', 
            'search_analyzer', 
            'autocomplete_analyzer'
        ];
        
        foreach ($requiredAnalyzers as $analyzer) {
            if (!isset($config['settings']['analysis']['analyzer'][$analyzer])) {
                throw new Exception("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: $analyzer");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        $requiredFields = [
            'product_id', 
            'external_id', 
            'name', 
            'brand_name', 
            'suggest'
        ];
        
        foreach ($requiredFields as $field) {
            if (!isset($config['mappings']['properties'][$field])) {
                throw new Exception("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: $field");
            }
        }
        
        echo "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç\n";
    }

    /**
     * ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function waitForIndexReady(): void {
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞...\n";
        
        $maxAttempts = 15;
        $attempt = 0;
        
        while ($attempt < $maxAttempts) {
            try {
                $health = $this->client->cluster()->health([
                    'index' => $this->newIndexName,
                    'wait_for_status' => 'yellow',
                    'timeout' => '10s'
                ]);
                
                if (in_array($health['status'], ['yellow', 'green'])) {
                    echo "‚úÖ –ò–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤ (—Å—Ç–∞—Ç—É—Å: {$health['status']})\n";
                    return;
                }
                
            } catch (Exception $e) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            }
            
            $attempt++;
            echo "   ‚è±Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $attempt/$maxAttempts...\n";
            sleep(2);
        }
        
        throw new Exception("‚ùå –ò–Ω–¥–µ–∫—Å –Ω–µ —Å—Ç–∞–ª –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è");
    }

    /**
     * üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function processAllProducts(): void {
        echo "üì¶ === –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –¢–û–í–ê–†–û–í ===\n";
        echo "üìä –¢–æ–≤–∞—Ä–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {$this->totalProducts}\n";
        echo "üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: " . BATCH_SIZE . "\n\n";
        
        $page = 1;
        $batchNumber = 0;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        do {
            $products = $this->fetchProductsBatch($page);
            if (empty($products)) break;
    
            $batchNumber++;
            $rangeStart = ($page - 1) * BATCH_SIZE + 1;
            $rangeEnd = ($page - 1) * BATCH_SIZE + count($products);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            $batchInfo = "{$rangeStart}-{$rangeEnd}";
            
            $this->processSingleBatch($products);
            $this->displayProgress($batchNumber, $batchInfo);
            
            $page++;
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
            if ($page % 10 === 0) {
                gc_collect_cycles();
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                echo "\n";
                $this->showMemoryUsage();
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É
            if ($page % 50 === 0) {
                echo "\n‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏...\n";
                sleep(1);
            }
            
        } while (true);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        echo "\n‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n";
    }

    /**
     * üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
     */
    private function fetchProductsBatch(int $page): array {
        $offset = ($page - 1) * BATCH_SIZE;
        
        try {
            $stmt = $this->pdo->prepare("
                SELECT p.*, 
                       COALESCE(b.name, '') AS brand_name,
                       COALESCE(s.name, '') AS series_name
                FROM products p
                LEFT JOIN brands b ON p.brand_id = b.brand_id
                LEFT JOIN series s ON p.series_id = s.series_id
                WHERE p.product_id IS NOT NULL 
                  AND p.product_id > 0
                ORDER BY p.product_id
                LIMIT :limit OFFSET :offset
            ");
            
            $stmt->bindValue(':limit', BATCH_SIZE, PDO::PARAM_INT);
            $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
            $stmt->execute();
            
            return $stmt->fetchAll();
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: " . $e->getMessage());
        }
    }

    /**
     * üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function processSingleBatch(array $products): void {
        $bulkData = [];
        $batchSkipped = 0;
        
        foreach ($products as $product) {
            try {
                // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                if (!$this->validateProduct($product)) {
                    $batchSkipped++;
                    continue;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                $this->normalizeProductData($product);
                $this->enrichProductData($product);
                
                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è bulk-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                $this->prepareBulkData($bulkData, $product);
                
            } catch (Exception $e) {
                $this->logProductError($product['product_id'] ?? 'unknown', $e);
                $batchSkipped++;
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ OpenSearch
        if (!empty($bulkData)) {
            $this->sendBulkRequest($bulkData);
        }
        
        $this->skipped += $batchSkipped;
        
        if ($batchSkipped > 0) {
            echo "   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ: $batchSkipped\n";
        }
    }

    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    private function validateProduct(array $product): bool {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (empty($product['product_id']) || $product['product_id'] <= 0) {
            return false;
        }
        
        // –•–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        if (empty($product['name']) && empty($product['external_id']) && empty($product['sku'])) {
            return false;
        }
        
        return true;
    }

    /**
     * üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
     */
    private function normalizeProductData(array &$product): void {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        $textFields = ['external_id', 'sku', 'name', 'description', 'brand_name', 'series_name'];
        foreach ($textFields as $field) {
            $product[$field] = $this->normalizeText($product[$field] ?? '');
        }
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        $product['product_id'] = max(1, (int)($product['product_id'] ?? 0));
        $product['brand_id'] = max(0, (int)($product['brand_id'] ?? 0));
        $product['series_id'] = max(0, (int)($product['series_id'] ?? 0));
        $product['min_sale'] = max(1, (int)($product['min_sale'] ?? 1));
        $product['weight'] = max(0, (float)($product['weight'] ?? 0));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
        $product['categories'] = [];
        $product['category_ids'] = [];
    }

    /**
     * üî§ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
     */
    private function normalizeText(?string $str): string {
        if (empty($str)) return '';
        
        // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–∞–±–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        $str = preg_replace('/[^\P{C}\t\n\r]+/u', '', $str);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        $str = preg_replace('/\s+/', ' ', $str);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        return trim($str);
    }

    /**
     * üé® –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
     */
    private function enrichProductData(array &$product): void {
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        $product['suggest'] = $this->createSuggestData($product);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        $searchComponents = array_filter([
            $product['name'],
            $product['external_id'],
            $product['sku'],
            $product['brand_name'],
            $product['series_name'],
            $product['description']
        ]);
        
        $product['search_all'] = $this->normalizeText(implode(' ', $searchComponents));
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç
        $product['created_at'] = $this->normalizeDate($product['created_at'] ?? null);
        $product['updated_at'] = $this->normalizeDate($product['updated_at'] ?? null);
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        $product['attributes'] = [];
        $product['images'] = [];
        $product['documents'] = [
            'certificates' => 0,
            'manuals' => 0,
            'drawings' => 0
        ];
        $product['popularity_score'] = 0.0;
        $product['in_stock'] = false;
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        $product = array_filter($product, function($value) {
            return $value !== null && $value !== '';
        });
    }

    /**
     * üìÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã
     */
    private function normalizeDate(?string $date): string {
        if (empty($date)) {
            return date('c');
        }
        
        try {
            $timestamp = strtotime($date);
            if ($timestamp === false) {
                return date('c');
            }
            return date('c', $timestamp);
        } catch (Exception $e) {
            return date('c');
        }
    }

    /**
     * üí° –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private function createSuggestData(array $product): array {
        $suggestions = [];
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (!empty($product['name']) && mb_strlen($product['name']) >= 2) {
            $suggestions[] = [
                'input' => [$product['name']],
                'weight' => 100
            ];
        }
        
        // –ê—Ä—Ç–∏–∫—É–ª
        if (!empty($product['external_id']) && mb_strlen($product['external_id']) >= 2) {
            $suggestions[] = [
                'input' => [$product['external_id']],
                'weight' => 95
            ];
        }
        
        // SKU
        if (!empty($product['sku']) && mb_strlen($product['sku']) >= 2) {
            $suggestions[] = [
                'input' => [$product['sku']],
                'weight' => 90
            ];
        }
        
        // –ë—Ä–µ–Ω–¥
        if (!empty($product['brand_name']) && mb_strlen($product['brand_name']) >= 2) {
            $suggestions[] = [
                'input' => [$product['brand_name']],
                'weight' => 70
            ];
        }
        
        // –°–µ—Ä–∏—è
        if (!empty($product['series_name']) && mb_strlen($product['series_name']) >= 2) {
            $suggestions[] = [
                'input' => [$product['series_name']],
                'weight' => 60
            ];
        }
        
        return $suggestions;
    }

    /**
     * üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è bulk-–∑–∞–ø—Ä–æ—Å–∞
     */
    private function prepareBulkData(array &$bulkData, array $product): void {
        $bulkData[] = [
            'index' => [
                '_index' => $this->newIndexName, 
                '_id' => $product['product_id']
            ]
        ];
        $bulkData[] = $product;
    }

    /**
     * üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ bulk-–∑–∞–ø—Ä–æ—Å–∞ –≤ OpenSearch
     */
    private function sendBulkRequest(array $bulkData): void {
        if (empty($bulkData)) return;
        
        try {
            $response = $this->client->bulk([
                'body' => $bulkData,
                'timeout' => '60s',
                'refresh' => false // –£—Å–∫–æ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
            ]);
            
            $itemsCount = count($bulkData) / 2;
            $this->processed += $itemsCount;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            if ($response['errors'] ?? false) {
                $this->handleBulkErrors($response['items'] ?? []);
            }
            
        } catch (Exception $e) {
            $this->errors += count($bulkData) / 2;
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ bulk-–∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage());
        }
    }

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ bulk-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
     */
    private function handleBulkErrors(array $items): void {
        foreach ($items as $item) {
            if ($error = $item['index']['error'] ?? null) {
                $this->errors++;
                
                $errorInfo = [
                    'id' => $item['index']['_id'] ?? 'unknown',
                    'type' => $error['type'] ?? 'unknown',
                    'reason' => $error['reason'] ?? 'unknown'
                ];
                
                error_log('Bulk indexing error: ' . json_encode($errorInfo));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
                if ($this->errors <= 5) {
                    echo "   ‚ùå –û—à–∏–±–∫–∞ ID {$errorInfo['id']}: {$errorInfo['reason']}\n";
                }
            }
        }
    }

    /**
     * üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    private function displayProgress(): void {
        if ($this->totalProducts === 0) return;
        
        $progress = round(($this->processed / $this->totalProducts) * 100, 1);
        $memory = round(memory_get_usage(true) / 1024 / 1024, 2) . 'MB';
        $elapsed = microtime(true) - $this->startTime;
        $speed = $this->processed > 0 ? round($this->processed / $elapsed, 0) : 0;
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        $barLength = 30;
        $filledLength = intval($progress / 100 * $barLength);
        $bar = str_repeat('‚ñà', $filledLength) . str_repeat('‚ñë', $barLength - $filledLength);
        
        $timeStr = $this->formatTime($elapsed);
        
        echo "\r[{$bar}] {$progress}% | ‚úÖ{$this->processed} ‚ùå{$this->errors} ‚ö†Ô∏è{$this->skipped} | üíæ{$memory} | ‚è±Ô∏è{$timeStr} | üöÄ{$speed}/s ";
        flush();
    }

    /**
     * üíæ –ü–æ–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    private function showMemoryUsage(): void {
        $current = memory_get_usage(true);
        $peak = memory_get_peak_usage(true);
        echo "\nüíæ –ü–∞–º—è—Ç—å: —Ç–µ–∫—É—â–∞—è " . round($current/1024/1024, 2) . "MB, –ø–∏–∫ " . round($peak/1024/1024, 2) . "MB\n";
    }

    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function validateNewIndex(): void {
        echo "\n‚úÖ === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–í–û–ì–û –ò–ù–î–ï–ö–°–ê ===\n";
        
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
            echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å...\n";
            $this->client->indices()->refresh(['index' => $this->newIndexName]);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $stats = $this->client->indices()->stats(['index' => $this->newIndexName]);
            $docCount = $stats['indices'][$this->newIndexName]['total']['docs']['count'] ?? 0;
            
            echo "üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: $docCount\n";
            echo "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º: {$this->processed}\n";
            echo "üìä –û—à–∏–±–æ–∫: {$this->errors}\n";
            echo "üìä –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$this->skipped}\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            $difference = abs($docCount - $this->processed);
            if ($difference > 10) { // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                echo "‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n";
            }
            
            // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            echo "üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...\n";
            $testSearch = $this->client->search([
                'index' => $this->newIndexName,
                'body' => [
                    'size' => 5,
                    'query' => ['match_all' => new \stdClass()],
                    '_source' => ['product_id', 'name', 'external_id']
                ]
            ]);
            
            $found = $testSearch['hits']['total']['value'] ?? 0;
            echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ $found –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n";
            
            if ($found === 0) {
                throw new Exception("‚ùå –ò–Ω–¥–µ–∫—Å –ø—É—Å—Ç –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!");
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            echo "üìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n";
            foreach ($testSearch['hits']['hits'] as $hit) {
                $source = $hit['_source'];
                echo "   üìÑ ID: {$source['product_id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: " . mb_substr($source['name'] ?? '–ù/–î', 0, 50) . "...\n";
            }
            
            echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n\n";
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . $e->getMessage());
        }
    }

    /**
     * üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
     */
    private function switchToNewIndex(): void {
        echo "üîÑ === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ù–û–í–´–ô –ò–ù–î–ï–ö–° ===\n";
        
        try {
            // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞
            $actions = [];
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–∏–∞—Å—ã
            try {
                $aliases = $this->client->indices()->getAlias(['name' => 'products_current']);
                foreach (array_keys($aliases) as $indexName) {
                    if ($indexName !== $this->newIndexName) {
                        $actions[] = ['remove' => ['index' => $indexName, 'alias' => 'products_current']];
                        echo "‚ûñ –£–¥–∞–ª—è–µ–º –∞–ª–∏–∞—Å —Å –∏–Ω–¥–µ–∫—Å–∞: $indexName\n";
                    }
                }
            } catch (Exception $e) {
                echo "‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –∞–ª–∏–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–ª–∏–∞—Å
            $actions[] = ['add' => ['index' => $this->newIndexName, 'alias' => 'products_current']];
            echo "‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –∫ –Ω–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É: {$this->newIndexName}\n";
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            if (!empty($actions)) {
                $this->client->indices()->updateAliases(['body' => ['actions' => $actions]]);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            $aliases = $this->client->indices()->getAlias(['name' => 'products_current']);
            echo "‚úÖ –ê–ª–∏–∞—Å products_current —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞:\n";
            foreach (array_keys($aliases) as $indexName) {
                echo "   üéØ $indexName\n";
            }
            
            echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n";
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞: " . $e->getMessage());
        }
    }

    /**
     * üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
     */
    private function performCleanup(): void {
        echo "üßπ === –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ò–ù–î–ï–ö–°–û–í ===\n";
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã products_*
            $indices = $this->client->indices()->get(['index' => 'products_*']);
            $allIndices = array_keys($indices);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–º–µ—é—Ç –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ –¥–∞—Ç—ã)
            usort($allIndices, function($a, $b) {
                return strcmp($b, $a); // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            });
            
            echo "üóÇÔ∏è –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: " . count($allIndices) . "\n";
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ MAX_OLD_INDICES —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ + –Ω–æ–≤—ã–π
            $indicesToKeep = array_slice($allIndices, 0, MAX_OLD_INDICES + 1);
            $indicesToDelete = array_slice($allIndices, MAX_OLD_INDICES + 1);
            
            echo "üìö –û—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤: " . count($indicesToKeep) . "\n";
            foreach ($indicesToKeep as $index) {
                echo "   üìÅ $index\n";
            }
            
            if (!empty($indicesToDelete)) {
                echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: " . count($indicesToDelete) . "\n";
                foreach ($indicesToDelete as $indexName) {
                    try {
                        echo "   üóëÔ∏è –£–¥–∞–ª—è–µ–º: $indexName\n";
                        $this->client->indices()->delete(['index' => $indexName]);
                    } catch (Exception $e) {
                        echo "   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $indexName: " . $e->getMessage() . "\n";
                    }
                }
            } else {
                echo "‚ÑπÔ∏è –°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏\n";
            }
            
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n";
            
        } catch (Exception $e) {
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " . $e->getMessage() . "\n";
        }
    }

    /**
     * üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    private function showFinalReport(): void {
        $totalTime = microtime(true) - $this->startTime;
        $speed = $this->processed > 0 ? $this->processed / $totalTime : 0;
        $successRate = $this->totalProducts > 0 ? ($this->processed / $this->totalProducts) * 100 : 0;
        
        echo $this->getFooter();
        echo "üéâ –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê\n";
        echo str_repeat("=", 60) . "\n";
        echo "üìÇ –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {$this->newIndexName}\n";
        echo "üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {$this->totalProducts}\n";
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {$this->processed}\n";
        echo "‚ùå –û—à–∏–±–æ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {$this->errors}\n";
        echo "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {$this->skipped}\n";
        echo "üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . number_format($successRate, 1) . "%\n";
        echo "‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: " . $this->formatTime($totalTime) . "\n";
        echo "üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: " . number_format($speed, 0) . " —Ç–æ–≤–∞—Ä–æ–≤/—Å–µ–∫\n";
        echo "üíæ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: " . round(memory_get_peak_usage(true)/1024/1024, 2) . "MB\n";
        echo "üîó –ê–ª–∏–∞—Å products_current: –ê–ö–¢–ò–í–ï–ù\n";
        echo "üßπ –°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã: –û–ß–ò–©–ï–ù–´\n";
        echo str_repeat("=", 60) . "\n";
        echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!\n";
        echo "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫\n\n";
    }

    /**
     * ‚ö° –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    private function getTotalProductsCount(): int {
        try {
            return (int)$this->pdo->query("SELECT COUNT(*) FROM products WHERE product_id IS NOT NULL AND product_id > 0")->fetchColumn();
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: " . $e->getMessage());
        }
    }

    private function parseMemoryLimit(string $limit): int {
        $limit = trim($limit);
        $last = strtolower($limit[strlen($limit) - 1]);
        $limit = (int)$limit;
        
        switch ($last) {
            case 'g': $limit *= 1024;
            case 'm': $limit *= 1024;
            case 'k': $limit *= 1024;
        }
        
        return $limit;
    }

    private function formatTime(float $seconds): string {
        if ($seconds < 60) {
            return number_format($seconds, 1) . 's';
        } elseif ($seconds < 3600) {
            return floor($seconds / 60) . 'm ' . number_format($seconds % 60, 0) . 's';
        } else {
            return floor($seconds / 3600) . 'h ' . floor(($seconds % 3600) / 60) . 'm';
        }
    }

    private function logProductError(int $productId, Exception $e): void {
        $this->errors++;
        $errorMsg = "Product ID $productId: " . $e->getMessage();
        error_log("Indexing error: " . $errorMsg);
    }

    private function getHeader(): string {
        return "
" . str_repeat("=", 80) . "
üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ò–ù–î–ï–ö–°–ê–¢–û–† OPENSEARCH v4.0
" . str_repeat("=", 80) . "
üìÖ –ó–∞–ø—É—Å–∫: " . date('Y-m-d H:i:s') . "
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: " . gethostname() . "
üêò PHP: " . PHP_VERSION . "
üíæ –ü–∞–º—è—Ç—å: " . ini_get('memory_limit') . "
‚è±Ô∏è –í—Ä–µ–º—è: " . ini_get('max_execution_time') . "s
" . str_repeat("=", 80) . "

";
    }

    private function getFooter(): string {
        return "\n" . str_repeat("=", 80) . "\n";
    }

    /**
     * üí• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
     */
    private function handleCriticalFailure(Throwable $e): void {
        echo "\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê\n";
        echo str_repeat("=", 50) . "\n";
        echo "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: " . $e->getMessage() . "\n";
        echo "üìç –§–∞–π–ª: " . $e->getFile() . ":" . $e->getLine() . "\n";
        echo "üîç Trace:\n" . $e->getTraceAsString() . "\n";
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if (isset($this->newIndexName) && isset($this->client)) {
            try {
                echo "\nüßπ –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...\n";
                $this->client->indices()->delete(['index' => $this->newIndexName]);
                echo "‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª–µ–Ω\n";
            } catch (Exception $cleanupException) {
                echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å: " . $cleanupException->getMessage() . "\n";
            }
        }
        
        echo "\n‚ùå –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ü–†–ï–†–í–ê–ù–ê\n";
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫—É –≤—ã—à–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n";
        
        exit(1);
    }
}

// üöÄ –¢–û–ß–ö–ê –í–•–û–î–ê - –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
ini_set('memory_limit', MEMORY_LIMIT);
ini_set('max_execution_time', MAX_EXECUTION_TIME);
set_time_limit(0);
gc_enable();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
try {
    $indexer = new CompleteIndexer();
    $indexer->run();
    
    echo "üéâ –°–ö–†–ò–ü–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!\n";
    echo "üîó –í–∞—à –ø–æ–∏—Å–∫ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: products_current\n";
    exit(0);
    
} catch (Throwable $e) {
    echo "\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –°–ö–†–ò–ü–¢–ê: " . $e->getMessage() . "\n";
    exit(1);
}